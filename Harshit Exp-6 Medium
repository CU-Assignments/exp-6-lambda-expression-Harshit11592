import java.util.*;
import java.util.stream.Collectors;
class Student {
    private String name;
    private double marks;
    public Student(String name, double marks) {
        this.name = name;
        this.marks = marks;
    }
    public String getName() {
        return name;
    }
    public double getMarks() {
        return marks;
    }
    @Override
    public String toString() {
        return name + " - " + marks;
    }
}
public class StudentFilter {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Student> students = new ArrayList<>();
        System.out.print("Enter number of students: ");
        int n = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        for (int i = 0; i < n; i++) {
            System.out.print("Enter name of student " + (i + 1) + ": ");
            String name = scanner.nextLine();
            System.out.print("Enter marks of student " + (i + 1) + ": ");
            double marks = scanner.nextDouble();
            scanner.nextLine(); // Consume newline
            students.add(new Student(name, marks));
        }
        // Using Streams and Lambda expressions
        List<String> filteredSortedStudents = students.stream()
                .filter(student -> student.getMarks() > 75) // Filter students scoring above 75%
                .sorted(Comparator.comparingDouble(Student::getMarks).reversed()) // Sort by marks in descending order
                .map(Student::getName) // Extract student names
                .collect(Collectors.toList());

        // Display the names of filtered and sorted students
        System.out.println("Students scoring above 75% sorted by marks:");
        filteredSortedStudents.forEach(System.out::println);
        scanner.close();
    }
}

