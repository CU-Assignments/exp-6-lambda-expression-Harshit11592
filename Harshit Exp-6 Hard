import java.util.*;
import java.util.stream.Collectors;
class Product {
    String name;
    String category;
    double price;
    Product(String name, String category, double price) {
        this.name = name;
        this.category = category;
        this.price = price;
    }

    @Override
    public String toString() {
        return name + " - Category: " + category + ", Price: " + price;
    }
}
public class ProductProcessing {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
                new Product("Laptop", "Electronics", 1200),
                new Product("Phone", "Electronics", 800),
                new Product("Shoes", "Fashion", 100),
                new Product("T-Shirt", "Fashion", 50),
                new Product("Fridge", "Appliances", 1500),
                new Product("Oven", "Appliances", 700)
        );
        // Grouping products by category
        Map<String, List<Product>> groupedByCategory = products.stream()
                .collect(Collectors.groupingBy(product -> product.category));

        // Finding the most expensive product in each category
        Map<String, Optional<Product>> mostExpensiveByCategory = products.stream()
                .collect(Collectors.groupingBy(product -> product.category,
                        Collectors.maxBy(Comparator.comparingDouble(product -> product.price))));
        // Calculating the average price of all products
        double averagePrice = products.stream()
                .mapToDouble(product -> product.price)
                .average()
                .orElse(0);
        // Display results
        System.out.println("Products grouped by category:");
        groupedByCategory.forEach((category, productList) -> 
                System.out.println(category + ": " + productList));
        System.out.println("\nMost expensive product in each category:");
        mostExpensiveByCategory.forEach((category, product) -> 
                System.out.println(category + ": " + product.orElse(null)));

        System.out.println("\nAverage price of all products: " + averagePrice);
    }
}
